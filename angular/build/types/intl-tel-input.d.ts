import { Country } from "./intl-tel-input/data";
import { I18n } from "./intl-tel-input/i18n/types";
declare global {
    interface HTMLInputElement {
        iti?: Iti;
    }
}
type UtilsLoader = () => Promise<{
    default: ItiUtils;
}>;
interface IntlTelInputInterface {
    (input: HTMLInputElement, options?: SomeOptions): Iti;
    autoCountry?: string;
    defaults: AllOptions;
    documentReady: () => boolean;
    getCountryData: () => Country[];
    getInstance: (input: HTMLInputElement) => Iti | null;
    instances: {
        [key: string]: Iti;
    };
    attachUtils: (source: UtilsLoader) => Promise<unknown> | null;
    startedLoadingAutoCountry: boolean;
    startedLoadingUtilsScript: boolean;
    version: string | undefined;
    utils?: ItiUtils;
}
type ItiUtils = {
    formatNumber(number: string, iso2: string | undefined, format?: number): string;
    formatNumberAsYouType(number: string, iso2: string | undefined): string;
    getCoreNumber(number: string, iso2: string | undefined): string;
    getExampleNumber(iso2: string | undefined, nationalMode: boolean, numberType: number, useE164?: boolean): string;
    getExtension(number: string, iso2: string | undefined): string;
    getNumberType(number: string, iso2: string | undefined): number;
    getValidationError(number: string, iso2: string | undefined): number;
    isPossibleNumber(number: string, iso2: string | undefined, numberType?: NumberType[] | null): boolean;
    isValidNumber(number: string, iso2: string | undefined, numberType?: NumberType[] | null): boolean;
    numberFormat: {
        NATIONAL: number;
        INTERNATIONAL: number;
        E164: number;
        RFC3966: number;
    };
    numberType: object;
};
type NumberType = "FIXED_LINE_OR_MOBILE" | "FIXED_LINE" | "MOBILE" | "PAGER" | "PERSONAL_NUMBER" | "PREMIUM_RATE" | "SHARED_COST" | "TOLL_FREE" | "UAN" | "UNKNOWN" | "VOICEMAIL" | "VOIP";
type SelectedCountryData = {
    name?: string;
    iso2?: string;
    dialCode?: string;
    areaCodes?: string[];
    nationalPrefix?: string;
};
interface AllOptions {
    allowDropdown: boolean;
    autoPlaceholder: string;
    containerClass: string;
    countryOrder: string[];
    countrySearch: boolean;
    customPlaceholder: ((selectedCountryPlaceholder: string, selectedCountryData: object) => string) | null;
    dropdownContainer: HTMLElement | null;
    excludeCountries: string[];
    fixDropdownWidth: boolean;
    formatAsYouType: boolean;
    formatOnDisplay: boolean;
    geoIpLookup: ((success: (iso2: string) => void, failure: () => void) => void) | null;
    hiddenInput: ((telInputName: string) => {
        phone: string;
        country?: string;
    }) | null;
    i18n: I18n;
    initialCountry: string;
    loadUtils: UtilsLoader;
    nationalMode: boolean;
    onlyCountries: string[];
    placeholderNumberType: NumberType;
    showFlags: boolean;
    separateDialCode: boolean;
    strictMode: boolean;
    useFullscreenPopup: boolean;
    validationNumberTypes: NumberType[] | null;
}
export type SomeOptions = Partial<AllOptions>;
export declare class Iti {
    id: number;
    promise: Promise<[unknown, unknown]>;
    private telInput;
    private highlightedItem;
    private options;
    private hadInitialPlaceholder;
    private isRTL;
    private showSelectedCountryOnLeft;
    private isAndroid;
    private selectedCountryData;
    private countries;
    private dialCodeMaxLen;
    private dialCodeToIso2Map;
    private dialCodes;
    private countryContainer;
    private selectedCountry;
    private selectedCountryInner;
    private selectedCountryA11yText;
    private selectedDialCode;
    private dropdownArrow;
    private dropdownContent;
    private searchInput;
    private searchResultsA11yText;
    private countryList;
    private dropdown;
    private hiddenInput;
    private hiddenInputCountry;
    private maxCoreNumberLength;
    private defaultCountry;
    private originalPaddingRight;
    private originalPaddingLeft;
    private _handleHiddenInputSubmit;
    private _handleLabelClick;
    private _handleClickSelectedCountry;
    private _handleCountryContainerKeydown;
    private _handleInputEvent;
    private _handleKeydownEvent;
    private _handleWindowScroll;
    private _handleMouseoverCountryList;
    private _handleClickCountryList;
    private _handleClickOffToClose;
    private _handleKeydownOnDropdown;
    private _handleSearchChange;
    private _handlePageLoad;
    private resolveAutoCountryPromise;
    private rejectAutoCountryPromise;
    private resolveUtilsScriptPromise;
    private rejectUtilsScriptPromise;
    constructor(input: HTMLInputElement, customOptions?: SomeOptions);
    _init(): void;
    private _processCountryData;
    private _sortCountries;
    private _addToDialCodeMap;
    private _processAllCountries;
    private _translateCountryNames;
    private _processDialCodes;
    private _generateMarkup;
    private _appendListItems;
    private _setInitialState;
    private _initListeners;
    private _initHiddenInputListener;
    private _initDropdownListeners;
    private _initRequests;
    private _loadAutoCountry;
    private _openDropdownWithPlus;
    private _initTelInputListeners;
    private _cap;
    private _trigger;
    private _openDropdown;
    private _setDropdownPosition;
    private _bindDropdownListeners;
    private _searchForCountry;
    private _filterCountries;
    private _updateSearchResultsText;
    private _handleUpDownKey;
    private _handleEnterKey;
    private _updateValFromNumber;
    private _updateCountryFromNumber;
    private _ensureHasDialCode;
    private _getCountryFromNumber;
    private _highlightListItem;
    private _getCountryData;
    private _setCountry;
    private _updateInputPadding;
    private _updateMaxLength;
    private _setSelectedCountryTitleAttribute;
    private _getHiddenSelectedCountryWidth;
    private _updatePlaceholder;
    private _selectListItem;
    private _closeDropdown;
    private _scrollTo;
    private _updateDialCode;
    private _getDialCode;
    private _getFullNumber;
    private _beforeSetNumber;
    private _triggerCountryChange;
    private _formatNumberAsYouType;
    handleAutoCountry(): void;
    handleUtils(): void;
    destroy(): void;
    getExtension(): string;
    getNumber(format?: number): string;
    getNumberType(): number;
    getSelectedCountryData(): SelectedCountryData;
    getValidationError(): number;
    isValidNumber(): boolean | null;
    private _utilsIsPossibleNumber;
    isValidNumberPrecise(): boolean | null;
    private _utilsIsValidNumber;
    setCountry(iso2: string): void;
    setNumber(number: string): void;
    setPlaceholderNumberType(type: NumberType): void;
    setDisabled(disabled: boolean): void;
}
declare const intlTelInput: IntlTelInputInterface;
export default intlTelInput;
