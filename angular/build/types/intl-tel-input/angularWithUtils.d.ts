import intlTelInput from "./intlTelInputWithUtils";
import { Iti, SomeOptions } from "../intl-tel-input";
import { OnInit, OnDestroy, ElementRef, EventEmitter, AfterViewInit } from "@angular/core";
import { ControlValueAccessor, Validator, AbstractControl, ValidationErrors } from "@angular/forms";
import * as i0 from "@angular/core";
export { intlTelInput };
export declare const PHONE_ERROR_MESSAGES: string[];
export declare class IntlTelInputComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor, Validator {
    inputRef: ElementRef<HTMLInputElement>;
    initialValue: string;
    usePreciseValidation: boolean;
    inputProps: object;
    disabled: boolean | undefined;
    initOptions: SomeOptions;
    numberChange: EventEmitter<string>;
    countryChange: EventEmitter<string>;
    validityChange: EventEmitter<boolean>;
    errorCodeChange: EventEmitter<number>;
    private iti;
    private countryChangeHandler;
    private onChange;
    private onTouched;
    private onValidatorChange;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    handleInput(): void;
    handleBlur(): void;
    getInstance(): Iti | null;
    getInput(): HTMLInputElement | null;
    ngOnDestroy(): void;
    private applyInputProps;
    writeValue(value: string | null): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    validate(control: AbstractControl): ValidationErrors | null;
    registerOnValidatorChange(fn: () => void): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IntlTelInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IntlTelInputComponent, "intl-tel-input", never, { "initialValue": { "alias": "initialValue"; "required": false; }; "usePreciseValidation": { "alias": "usePreciseValidation"; "required": false; }; "inputProps": { "alias": "inputProps"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "initOptions": { "alias": "initOptions"; "required": false; }; }, { "numberChange": "numberChange"; "countryChange": "countryChange"; "validityChange": "validityChange"; "errorCodeChange": "errorCodeChange"; }, never, never, true, never>;
}
